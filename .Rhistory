geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error), pch = 21)+
scale_fill_manual()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "transparent", "black")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "transparent", "black")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(c("transparent", "black"))
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "transparent", "black")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c("gray", "black"))
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "transparent", "black")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(NA, "black"))
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, NA, "black")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(NA, "black"))
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(NA, "black"))
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c("#RRGGBBAA", "black"))
alpha("gray", 0)
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black"))
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
geom_vline(xintercept = 0, lty = 5, color = "gray", alpha = 0.25)
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
geom_vline(xintercept = 0, lty = 5, color = "gray", alpha = 0.25)+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
geom_vline(xintercept = 0, lty = 5, color = "gray")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_vline(xintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_vline(xintercept = 0, lty = 5, color = "gray")
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_vline(xintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black"))
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
#geom_vline(xintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_vline(xintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_vline(xintercept = 0, lty = 5)+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
geom_vline(xintercept = 0, lty = 5, color = "gray")+
coord_flip()+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
geom_hline(yintercept = 0, lty = 5, color = "gray")+
coord_flip()+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
ggplot(aes(x = response, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
cowplot::theme_cowplot()
install.packages("forcats")
library(forcats)
names(ms)
head(ms)
mutate(response_ordered = forcats::fct_reorder(response, estimate)
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate))
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ term)+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ term, scales = "free_x")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col, show.legend = F), pch = 21)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ term, scales = "free_x")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ term, scales = "free_x")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ term, scales = "free_x")+
labs(y = "", x = "Effect size")+
cowplot::theme_cowplot()
ggsave("figures/continuous_predictor_effects.png", device = "png")
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ term, scales = "free_x")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ggsave("figures/continuous_predictor_effects.png", device = "png")
ms
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ term + response_cat, scales = "free_x")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ response_cat, scales = "free_x")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ response_cat, scales = "free")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(~ response_cat + term, scales = "free")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
?facet_grid
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_grid(rows = response_cat, cols = term, scales = "free")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_grid(rows = response_cat, cols = term, scales = "free")
ms
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_grid(term ~ reponse_cat, scales = "free")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_grid(reponse_cat ~ term, scales = "free")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_grid(reponse_cat + term, scales = "free")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_grid(rows = vars(reponse_cat), cols = vars(term), scales = "free")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ms
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(term ~ response_cat, scales = "free")+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(response_cat ~ term, scales = "free", ncol = 2)+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ggsave("figures/continuous_predictor_effects.png", device = "png")
ggsave("figures/continuous_predictor_effects.png", device = "png", width = 10, height = 30)
ggsave("figures/continuous_predictor_effects.png", device = "png", width = 10, height = 20)
levels(df$burn_debris)
levels(as.factor(df$burn_debris))
names(df)
mod.predict.trout <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(max_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
ggpredict(glmer(form, data, family = "poisson"), terms = ~ trout) %>%
as.data.frame() %>%
mutate(response = y, .before = x)
} else{
ggpredict(lmer(form, data), terms = ~ trout) %>%
as.data.frame() %>%
mutate(response = y, .before = x)
}
}
model_predictions_trout <- map_dfr(unlist(responses[-2], use.names = F), mod.predict.trout, data = df)
mt <- model_predictions_trout %>%
rename(burn_debris = x) %>%
select(-group) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
))
mt <- model_predictions_trout %>%
rename(trout = x) %>%
select(-group) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
))
mt %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response, scales = "free")
mt %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
labs(y = "Conditional mean abundance", x = "Response", title = "Trout effects")+
cowplot::theme_cowplot()
mt %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response_cat)+
labs(y = "Conditional mean abundance", x = "Response", title = "Trout effects")+
cowplot::theme_cowplot()
mt %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response_cat, scales = "free")+
labs(y = "Conditional mean abundance", x = "Response", title = "Trout effects")+
cowplot::theme_cowplot()
mt %>%
filter(!response %in% c("no_wings", "total_non_insects")) %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response_cat, scales = "free")+
labs(y = "Conditional mean abundance", x = "Response", title = "Trout effects")+
cowplot::theme_cowplot()
mt %>%
filter(!response %in% c("no_wings", "total_non_insects", "mollusks")) %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response_cat, scales = "free")+
labs(y = "Conditional mean abundance", x = "Response", title = "Trout effects")+
cowplot::theme_cowplot()
ggpredict(mod.sample, terms = ~ trout)
ggpredict(mod.sample, terms = ~ trout, condition = c(burn_debris[4]))
?ggpredict
unique(df$burn_debris)
ggpredict(mod.sample, terms = ~ trout, condition = c(burn_debris = "un"))
mod.predict.trout <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(max_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
ggpredict(glmer(form, data, family = "poisson"), terms = ~ trout, condition = c(burn_debris = "un")) %>%
as.data.frame() %>%
mutate(response = y, .before = x)
} else{
ggpredict(lmer(form, data), terms = ~ trout, condition = c(burn_debris = "un")) %>%
as.data.frame() %>%
mutate(response = y, .before = x)
}
}
ggpredict(mod.sample, terms = ~ trout, condition = c(burn_debris = "un"))
model_predictions_trout <- map_dfr(unlist(responses[-2], use.names = F), mod.predict.trout, data = df)
mt <- model_predictions_trout %>%
rename(trout = x) %>%
select(-group) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
))
mt %>%
filter(!response %in% c("no_wings", "total_non_insects", "mollusks")) %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response_cat, scales = "free")+
labs(y = "Conditional mean abundance", x = "Response", title = "Trout effects")+
cowplot::theme_cowplot()
ggsave("figures/trout_effects.png", device = "png")
ggsave("figures/trout_effects.png", device = "png", width = 15, height = 12)
mt %>%
filter(!response %in% c("no_wings", "total_non_insects", "mollusks")) %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5))+
coord_flip()+
facet_wrap(~response_cat, scales = "free")+
labs(y = "Conditional mean abundance", x = "Response", title = "Trout effects")+
cowplot::theme_cowplot()
ggsave("figures/trout_effects.png", device = "png", width = 15, height = 12)
responses
?scale
model_sum
model_sum
mp
head(mp)
respones
responses
predictors
