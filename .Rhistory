warning = ifelse(length(mod.sample$warnings) == 0, "NO", "YES"))
mod.df
}
}
# test it
mod.function(y = "total_insects", data = df) # works!
model_sum <- map_dfr(unlist(responses[-2], use.names = F), mod.function.q, data = df) %>%
mutate(sig = ifelse(p.value < 0.05 & p.value > 0.01, "*",
ifelse(p.value < 0.01 & p.value > 0.001, "**",
ifelse(p.value <= 0.001, "***", "NS"))))
model_sum <- map_dfr(unlist(responses[-2], use.names = F), mod.function, data = df) %>%
mutate(sig = ifelse(p.value < 0.05 & p.value > 0.01, "*",
ifelse(p.value < 0.01 & p.value > 0.001, "**",
ifelse(p.value <= 0.001, "***", "NS"))))
model_sum
unique(model_sum$warning)
y <- 2*x + 3
x <- 1:100
y <- 2*x + 3
lm(y ~ x)
test <- lm(y ~ x)
summary(test)
tidy(test)
q.lm <- quietly(lm)
test <- lm(y ~ x)
test
test <- q.lm(y ~ x)
test
q.tidy <- quietly(tidy)
test <- lm(y ~ x)
q.tidy(test)
temp <- q.tidy(test)
length(temp$warnings)
character(temp$warnings)
length(temp$warnings)
q.tidy = quietly(tidy)
mod.function <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
mod.df = tidy(mod.temp)$result %>%
mutate(response = y, .before = effect,
warning = ifelse(length(mod.temp$warnings) == 0, "NO", "YES"))
mod.df
} else{
mod.temp = q.lmer(form, data)
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect,
warning = ifelse(length(mod.temp$warnings) == 0, "NO", "YES"))
mod.df
}
}
model_sum <- map_dfr(unlist(responses[-2], use.names = F), mod.function, data = df) %>%
mutate(sig = ifelse(p.value < 0.05 & p.value > 0.01, "*",
ifelse(p.value < 0.01 & p.value > 0.001, "**",
ifelse(p.value <= 0.001, "***", "NS"))))
model_sum <- map_dfr(unlist(responses[-2], use.names = F), mod.function, data = df)
mod.function <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect,
warning = ifelse(length(mod.temp$warnings) == 0, "NO", "YES"))
mod.df
} else{
mod.temp = q.lmer(form, data)
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect,
warning = ifelse(length(mod.temp$warnings) == 0, "NO", "YES"))
mod.df
}
}
model_sum <- map_dfr(unlist(responses[-2], use.names = F), mod.function, data = df) %>%
mutate(sig = ifelse(p.value < 0.05 & p.value > 0.01, "*",
ifelse(p.value < 0.01 & p.value > 0.001, "**",
ifelse(p.value <= 0.001, "***", "NS"))))
model_sum
unique(model_sum$warning)
model_sum %>% filter(warning == "YES")
model_sum %>% filter(warning == "YES") %>% View()
mod.function <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect,
warning = mod.temp$warning)
mod.df
} else{
mod.temp = q.lmer(form, data)
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect,
warning = mod.temp$warning)
mod.df
}
}
model_sum <- map_dfr(unlist(responses[-2], use.names = F), mod.function, data = df) %>%
mutate(sig = ifelse(p.value < 0.05 & p.value > 0.01, "*",
ifelse(p.value < 0.01 & p.value > 0.001, "**",
ifelse(p.value <= 0.001, "***", "NS"))))
mod.function <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect,
warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings))
mod.df
} else{
mod.temp = q.lmer(form, data)
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect,
warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings))
mod.df
}
}
model_sum <- map_dfr(unlist(responses[-2], use.names = F), mod.function, data = df) %>%
mutate(sig = ifelse(p.value < 0.05 & p.value > 0.01, "*",
ifelse(p.value < 0.01 & p.value > 0.001, "**",
ifelse(p.value <= 0.001, "***", "NS"))))
View(model_sum)
# test it
mod.predict(y = "total_insects", data = df) # works!
mod.predict <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the response is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x,
warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = p.value)
} else{
mod.temp = q.lmer(form, data)
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x,
warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = p.value)
}
}
# test it
mod.predict(y = "total_insects", data = df) # works!
mod.predict <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the response is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = p.value)
} else{
mod.temp = q.lmer(form, data)
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = p.value)
}
}
# test it
mod.predict(y = "total_insects", data = df) # works!
mod.predict <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the response is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group)
} else{
mod.temp = q.lmer(form, data)
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group)
}
}
# test it
mod.predict(y = "total_insects", data = df) # works!
mod.function <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = p.value)
mod.df
} else{
mod.temp = q.lmer(form, data)
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = p.value)
mod.df
}
}
# test it
mod.function(y = "total_insects", data = df) # works!
model_sum <- map_dfr(unlist(responses[-2], use.names = F), mod.function, data = df) %>%
mutate(sig = ifelse(p.value < 0.05 & p.value > 0.01, "*",
ifelse(p.value < 0.01 & p.value > 0.001, "**",
ifelse(p.value <= 0.001, "***", "NS"))))
ms <- model_sum %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
)) %>%
filter(term == "scale(avg_daily_disch_nr_nrst_gage)" | term == "scale(preceding_yr_dry_duration_ys)" | term == "scale(yrs_since_disturbance)") %>%
mutate(term = case_when(
term == "scale(avg_daily_disch_nr_nrst_gage)" ~ "Average daily discharge",
term == "scale(preceding_yr_dry_duration_ys)" ~ "Drying index",
term == "scale(yrs_since_disturbance)" ~ "Years since last disturbance"
)) %>%
filter(warning == "NO")
model_predictions <- map_dfr(unlist(responses[-2], use.names = F), mod.predict, data = df)
mp <- model_predictions %>%
rename(burn_debris = x) %>%
select(-group) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
)) %>%
filter(warning == "NO")
mp %>% filter(response_cat == "physical_chemical") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean", x = "Burn status", title = "Physical and chemical reponses")+
cowplot::theme_cowplot()
ggsave("figures/physical_chemical.png", device = "png")
mp %>% filter(response_cat == "invert_taxa") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response, scales = "free", ncol = 3) +
labs(y = "Conditional mean abundance", x = "Burn status", title = "Invertebrate taxonomic reponses")+
cowplot::theme_cowplot()
ggsave("figures/invert_taxa.png", device = "png")
mp %>% filter(response_cat == "invert_traits") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean abundance", x = "Burn status", title = "Invertebrate trait class reponses")+
cowplot::theme_cowplot()
ggsave("figures/invert_traits.png", device = "png")
mp %>% filter(response_cat == "invert_indices") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional means", x = "Burn status", title = "Invertebrate indices")+
cowplot::theme_cowplot()
ggsave("figures/invert_indices.png", device = "png")
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(response_cat ~ term, scales = "free", ncol = 3)+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ggsave("figures/continuous_predictor_effects.png", device = "png", width = 15, height = 20)
model_predictions
dim(model_predictions)
dim(mp)
names(ms)
ms <- model_sum %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
)) %>%
filter(term == "scale(avg_daily_disch_nr_nrst_gage)" | term == "scale(preceding_yr_dry_duration_ys)" | term == "scale(yrs_since_disturbance)") %>%
mutate(term = case_when(
term == "scale(avg_daily_disch_nr_nrst_gage)" ~ "Average daily discharge",
term == "scale(preceding_yr_dry_duration_ys)" ~ "Drying index",
term == "scale(yrs_since_disturbance)" ~ "Years since last disturbance"
)) %>%
mutate(estimate = ifelse(warning == "NO", estimate, NA))
ms
tail(ms)
summary(ms$estimate)
mp <- model_predictions %>%
rename(burn_debris = x) %>%
select(-group) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
)) %>%
mutate(estimate = ifelse(warning == "NO", estimate, NA))
mp
head(mp)
mp <- model_predictions %>%
rename(burn_debris = x) %>%
select(-group) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA))
mp %>% filter(response_cat == "physical_chemical") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean", x = "Burn status", title = "Physical and chemical reponses")+
cowplot::theme_cowplot()
ggsave("figures/physical_chemical.png", device = "png")
mp %>% filter(response_cat == "invert_taxa") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response, scales = "free", ncol = 3) +
labs(y = "Conditional mean abundance", x = "Burn status", title = "Invertebrate taxonomic reponses")+
cowplot::theme_cowplot()
ggsave("figures/invert_taxa.png", device = "png")
mp %>% filter(response_cat == "invert_traits") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean abundance", x = "Burn status", title = "Invertebrate trait class reponses")+
cowplot::theme_cowplot()
ggsave("figures/invert_traits.png", device = "png")
mp %>% filter(response_cat == "invert_indices") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5), show.legend = F)+
coord_flip()+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional means", x = "Burn status", title = "Invertebrate indices")+
cowplot::theme_cowplot()
ggsave("figures/invert_indices.png", device = "png")
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(response_cat ~ term, scales = "free", ncol = 3)+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ggsave("figures/continuous_predictor_effects.png", device = "png", width = 15, height = 20)
mod.predict.trout <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group)
} else{
mod.temp = q.lmer(form, data)
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group)
}
}
ggpredict(mod.sample, terms = ~ trout, condition = c(burn_debris = "un"))
model_predictions_trout <- map_dfr(unlist(responses[-2], use.names = F), mod.predict.trout, data = df)
mod.predict.trout <- function(y, data){
response = as.name(y)
form = substitute(response ~ trout + burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + scale(yrs_since_disturbance) + (1|code) + (1|year)) # model form
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
ggpredict(mod.temp$result, terms = ~ trout) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group)
} else{
mod.temp = q.lmer(form, data)
ggpredict(mod.temp$result, terms = ~ trout) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group)
}
}
model_predictions_trout <- map_dfr(unlist(responses[-2], use.names = F), mod.predict.trout, data = df)
head(model_predictions_trout)
unique(model_predictions_trout$warning)
mt <- model_predictions_trout %>%
rename(trout = x) %>%
select(-group) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA))
mt %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5))+
coord_flip()+
facet_wrap(~response_cat, scales = "free")+
labs(y = "Conditional mean abundance", x = "Response", title = "Trout effects")+
cowplot::theme_cowplot()
mt <- model_predictions_trout %>%
rename(trout = x) %>%
select(-group) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "physical_chemical",
response %in% responses[[3]] ~ "invert_taxa",
response %in% responses[[4]] ~ "invert_traits",
response %in% responses[[5]] ~ "invert_indices"
)) %>%
filter(warning == "NO")
mt %>%
ggplot(aes(x = response, y = predicted))+
geom_pointrange(aes(color = trout, ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.5))+
coord_flip()+
facet_wrap(~response_cat, scales = "free")+
labs(y = "Conditional mean abundance", x = "Response", title = "Trout effects")+
cowplot::theme_cowplot()
ggsave("figures/trout_effects.png", device = "png", width = 15, height = 12)
?formula
formula(~x + y)
str(formula(~x + y))
formula(response~x + y)
substitute(X, formulat(response~x+u))
substitute(X, formula(response~x+u))
?substitute
temp <- function(X){}
mod <- formula(response ~ x + x2)
mod <- formula(response ~ x + x2)
temp <- function(X){
response = as.name(X)
substitute(mod)
}
temp(mod)
temp <- function(model, X){
response = as.name(X)
paste(response, mod)
}
temp(mod)
temp(mod, alternative)
temp(mod, "alternative")
mod <- formula(~ x + x2)
temp <- function(model, X){
paste(response, mod)
}
temp(mod, "alternative")
temp <- function(model, X){
paste(X, mod)
}
temp(mod, "alternative")
mod <- character(~ x + x2)
mod <- c(~ x + x2)
mod
temp <- function(model, X){
paste(X, mod)
}
temp(mod, "alternative")
temp <- function(model, X){
t <- paste(X, mod)
formula(t)
}
temp(mod, "alternative")
y = rnorm(n = length(x), mean = x)
x = 1:100
y = rnorm(n = length(x), mean = x)
plot(y~x)
y = rnorm(n = length(x), mean = x, sd = 10)
plot(y~x)
mod <- c(~ x)
temp <- function(model, X){
t <- paste(X, mod)
formula(t)
}
temp(mod, "y")
temp <- function(model, X){
t <- paste(X, mod)
t2 <- formula(t)
lm(t2)
}
temp(mod, "y")
summary(lm(t2))
temp <- function(model, X){
t <- paste(X, mod)
t2 <- formula(t)
summary(lm(t2))
}
temp(mod, "y")
source("code/libraries_functions.R")
source("code/clean_data.R")
head(df)
names(df)
