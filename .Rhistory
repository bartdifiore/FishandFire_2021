t$trout
effects_on_trout <- glmer(trout.binomial ~ avg_max_depth + temp + do + (1|code) + (1|year), t, family = "binomial")
t <- t %>%
mutate(trout.binomial = ifelse(trout == "absent", 0, 1))
effects_on_trout <- glmer(trout.binomial ~ avg_max_depth + temp + do + (1|code) + (1|year), t, family = "binomial")
summary(effects_on_trout)
?glmer
effects_on_trout <- glmer(trout.binomial ~ avg_max_depth + temp + (1|code) + (1|year), t, family = "binomial", control = list())
effects_on_trout <- glmer(trout.binomial ~ avg_max_depth + temp + (1|code) + (1|year), t, family = "binomial")
summary(effects_on_trout)
effects_on_trout <- glmer(trout.binomial ~ avg_max_depth + do + (1|code) + (1|year), t, family = "binomial")
effects_on_trout <- glmer(trout.binomial ~ avg_max_depth + temp + (1|code) + (1|year), t, family = "binomial")
summary(effects_on_trout)
t$do
effects_on_trout <- glmer(trout.binomial ~ scale(avg_max_depth) + scale(temp) + scale(do) + (1|code) + (1|year), t, family = "binomial")
summary(effects_on_trout)
effects_on_trout <- glmer(trout.binomial ~ scale(avg_max_depth) + scale(temp) + (1|code) + (1|year), t, family = "binomial")
summary(effects_on_trout)
pred_trout <- ggpredict(effects_on_trout, ~avg_max_depth + temp)
pred_trout <- ggpredict(effects_on_trout, ~avg_max_depth[all] + temp)
pred_trout <- ggpredict(effects_on_trout, terms = c("avg_max_depth[all]", "temp")
pred_trout <- ggpredict(effects_on_trout, terms = c("avg_max_depth[all]", "temp"))
pred_trout <- ggpredict(effects_on_trout, terms = c("avg_max_depth[all]", "temp"))
pred_trout
pred_trout <- ggpredict(effects_on_trout, terms = c("avg_max_depth[all]"))
pred_trout
plot(pred_trout)
pred_trout <- ggpredict(effects_on_trout, terms = c("avg_max_depth"))
plot(pred_trout)
vec <- seq(min(t$avg_max_depth), max(t$avg_max_depth), length.out = 100)
pred_trout <- ggpredict(effects_on_trout, terms = c("avg_max_depth[vec]"), )
plot(pred_trout)
pred_trout <- as.data.frame(ggpredict(effects_on_trout, terms = c("avg_max_depth[vec]")))
head(pred_trout)
pred_trout <- as.data.frame(ggpredict(effects_on_trout, terms = c("avg_max_depth[vec]"))) %>%
rename(avg_max_depth = x)
pred_trout
head(pred_trout)
ggplot(t, aes(x = avg_max_depth, y = trout.binomial))+
geom_point()
pred_trout
head(pred_trout)
ggplot(t, aes(x = avg_max_depth, y = trout.binomial))+
geom_point()+
geom_line(data = pred_trout, aes(x = avg_max_depth, y = predicted))+
geom_ribbon(data = pred_trout, aes(x = avg_max_depth, y = predicted, ymin = conf.low, ymax = conf.high))
ggplot(t, aes(x = avg_max_depth, y = trout.binomial))+
geom_point()+
geom_line(data = pred_trout, aes(x = avg_max_depth, y = predicted))+
geom_ribbon(data = pred_trout, aes(x = avg_max_depth, y = predicted, ymin = conf.low, ymax = conf.high), alpha = 0.25)
ggplot(t, aes(x = avg_max_depth, y = trout.binomial))+
geom_point()+
geom_line(data = pred_trout, aes(x = avg_max_depth, y = predicted))+
geom_ribbon(data = pred_trout, aes(x = avg_max_depth, y = predicted, ymin = conf.low, ymax = conf.high), alpha = 0.25)+
theme_cowplot()
ggplot(t, aes(x = avg_max_depth, y = trout.binomial))+
geom_point()+
geom_line(data = pred_trout, aes(x = avg_max_depth, y = predicted))+
geom_ribbon(data = pred_trout, aes(x = avg_max_depth, y = predicted, ymin = conf.low, ymax = conf.high), alpha = 0.25)+
cowplot::theme_cowplot()
ggplot(t, aes(x = avg_max_depth, y = trout.binomial))+
geom_point()+
geom_line(data = pred_trout, aes(x = avg_max_depth, y = predicted))+
geom_ribbon(data = pred_trout, aes(x = avg_max_depth, y = predicted, ymin = conf.low, ymax = conf.high), alpha = 0.25)+
cowplot::theme_cowplot()+
labs(x = "Average max depth (units)", y = "Trout presence / absence")
ggsave("figures/depth_on_trout.png", device = "png")
source("code/libraries_functions.R")
source("code/clean_data.R")
names(df)
names(raw)
source("code/clean_data.R")
ggplot(df, aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point()
ggplot(df, aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris))
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris))
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris))
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 2)
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 3)
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 3)+
cowplot::theme_cowplot()
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 3)+
labs(x = "Years since last disturbance", y = "Average canopy cover (%)", shape = "Disturbance type")+
cowplot::theme_cowplot()
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 3)+
labs(x = "Years since last disturbance", y = "Average canopy cover (%)", shape = "Disturbance type", color = "Disturbance type")+
cowplot::theme_cowplot()
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 3)+
labs(x = "Years since last disturbance", y = "Average canopy cover (%)", shape = "Disturbance type", color = "Disturbance type")+
cowplot::theme_cowplot()+
theme(legend.position = "top")
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 3)+
labs(x = "Years since last disturbance", y = "Average canopy cover (%)", shape = "Disturbance type", color = "Disturbance type")+
cowplot::theme_cowplot()+
theme(legend.position = c(0.2, 0.8))
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 3)+
labs(x = "Years since last disturbance", y = "Average canopy cover (%)", shape = "Disturbance type", color = "Disturbance type")+
cowplot::theme_cowplot()+
theme(legend.position = c(0.8, 0.2))
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 3)+
labs(x = "Years since last disturbance", y = "Average canopy cover (%)", shape = "Disturbance type", color = "Disturbance type")+
cowplot::theme_cowplot()+
theme(legend.position = c(0.6, 0.2))
df %>%
drop_na(burn_debris) %>%
ggplot(aes(x = yrs_since_disturbance, y = avg_canopy_cover))+
geom_point(aes(shape = burn_debris, color = burn_debris), size = 3)+
labs(x = "Years since last disturbance", y = "Average canopy cover (%)", shape = "Disturbance type", color = "Disturbance type")+
cowplot::theme_cowplot()+
theme(legend.position = c(0.7, 0.2))
ggsave("figures/canopyXtimedisturbance.png", device = "png")
effects_on_trout <- glmer(trout.binomial ~ scale(avg_max_depth) * scale(temp) + (1|code) + (1|year), t, family = "binomial")
summary(effects_on_trout)
effects_on_trout <- glmer(trout.binomial ~ scale(avg_max_depth) + scale(temp) + (1|code) + (1|year), t, family = "binomial")
summary(effects_on_trout)
cor <- psych::cor.plot(drivers) # lots of colinearity
png("figures/correlogram.png")
cor
dev.off()
png("figures/correlogram.png")
plot(cor)
dev.off()
png("figures/correlogram.png")
psych::cor.plot(drivers)
dev.off()
source("code/libraries_functions.R")
source("code/clean_data.R")
#------------------------------------------------------------
## Model univariate relationships
#------------------------------------------------------------
# Here, we model the effect of trout presence, burn status, and drought on invertebrate community structure, including physical characteristics of the community, the abundance of invertebrate taxa, the abundance of invertebrate trait categories, and overall invertebrate indices. We will assume the same set of predictors for each model, and vary the response of interest.
# For simplicity, I'll divide the models and figures into the different "classes" of repsonse variable according to the table of response variables in `Fire-trout hypotheses.docx`
#-------------------------------------------------------------
## Sample model
#-------------------------------------------------------------
df = df %>%
mutate(burn_debris = forcats::fct_relevel(burn_debris, "un", before = "bdf")) %>%
drop_na(burn_debris)
mod.sample <- glmer(total_inverts ~ burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + trout + (1|code) + (1|year), df, family = "poisson")
summary(mod.sample)
car::qqPlot(residuals(mod.sample))
hist(residuals(mod.sample), breaks = 30)
library (multcomp)
summary(glht(mod.sample, mcp(burn_debris="Tukey")))
summary(glht(mod.sample, mcp(burn_debris= c("bdf - brb = 0"))))
temp <- summary(glht(mod.sample, mcp(burn_debris = c("bdf - un = 0",
"brb - un = 0",
"bri - un = 0" ))))
# This just confirms that we don't have collinearity between the two continuous predictors
plot(max_disch_nr_nrst_gage ~ preceding_yr_dry_duration_ys, df)
cor.test(df$max_disch_nr_nrst_gage, df$preceding_yr_dry_duration_ys)
# Build a function for the model
q.glmer <- quietly(glmer)
q.lmer <- quietly(lmer)
mod.function <- function(y, data){
response = as.name(y)
form = substitute(response ~ burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + trout + (1|code) + (1|year)) # model form
if(y %in% c("mollusks", "no_wings", "turbellaria") == T){
mod.temp = q.glmer(form, data[data$burn_debris != "bdf", ], family = "poisson")
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = p.value)
mod.df
} else {
if(is.integer(data[,y]) == T){ # this just fits a poisson glmer if the repsonse is integer data, but a linear mixed effects model if the response is non-integer
mod.temp = q.glmer(form, data, family = "poisson")
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = p.value)
mod.df
} else{
mod.temp = q.lmer(form, data)
mod.df = tidy(mod.temp$result) %>%
mutate(response = y, .before = effect) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = p.value)
mod.df
}}
}
# test it
mod.function(y = "mollusks", data = df) # works!
tidy(mod.sample, effects = "fixed") %>% mutate(response = "total_insects", .before = effect)
mod.function(y = "temp", data = df) # works!
mod.predict <- function(y, data){
response = as.name(y)
form = substitute(response ~ burn_debris + scale(avg_daily_disch_nr_nrst_gage) + scale(preceding_yr_dry_duration_ys) + trout + (1|code) + (1|year)) # model form
if(y %in% c("mollusks", "no_wings", "turbellaria") == T){
# run the model
mod.temp = q.glmer(form, data[data$burn_debris != "bdf", ], family = "poisson")
# estimate post hoc comparisons
post.hoc = summary(glht(mod.temp$result, mcp(burn_debris=c("brb - un = 0",
"bri - un = 0"))))
df.post = data.frame(response = y,
x = c("brb", "bri"),
comparison = names(post.hoc$test$coefficients),
difference = post.hoc$test$coefficients,
pvalue = round(post.hoc$test$pvalues,8)
)
dummy.row <- data.frame(response = y, x = "bdf", predicted = 0, std.error = NA,
conf.low = NA, conf.high = NA, group = as.factor("1"), warning = "NO", comparison = "NA", difference = NA, pvalue = NA)
# run the model predictions and join the posthoc comparisons
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group) %>%
left_join(df.post) %>%
bind_rows(dummy.row)
} else{
if(is.integer(data[,y]) == T ){ # this just fits a poisson glmer if the response is integer data, but a linear mixed effects model if the response is non-integer
# run the model
mod.temp = q.glmer(form, data, family = "poisson")
# estimate post hoc comparisons
post.hoc = summary(glht(mod.temp$result, mcp(burn_debris=c("bdf - un = 0",
"brb - un = 0",
"bri - un = 0"))))
df.post = data.frame(response = y,
x = c("bdf", "brb", "bri"),
comparison = names(post.hoc$test$coefficients),
difference = post.hoc$test$coefficients,
pvalue = round(post.hoc$test$pvalues,8)
)
# run the model predictions and join the posthoc comparisons
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group) %>%
left_join(df.post)
} else{
# run the model
mod.temp = q.lmer(form, data)
# estimate post hoc comparisons
post.hoc = summary(glht(mod.temp$result, mcp(burn_debris=c("bdf - un = 0",
"brb - un = 0",
"bri - un = 0"))))
df.post = data.frame(response = y,
x = c("bdf", "brb", "bri"),
comparison = names(post.hoc$test$coefficients),
difference = post.hoc$test$coefficients,
pvalue = round(post.hoc$test$pvalues,8)
)
ggpredict(mod.temp$result, terms = ~ burn_debris) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group) %>%
left_join(df.post)
}}
}
# test it
mod.predict(y = "turbellaria", data = df) # works!
as.data.frame(ggpredict(mod.sample, terms = ~burn_debris))
#---------------------------------------------------------------
## Apply model to all responses
#---------------------------------------------------------------
model_sum <- map_dfr(unlist(responses, use.names = F), mod.function, data = df) %>%
mutate(sig = ifelse(p.value < 0.05 & p.value > 0.01, "*",
ifelse(p.value < 0.01 & p.value > 0.001, "**",
ifelse(p.value <= 0.001, "***", "NS"))))
ms <- model_sum %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "Environmental",
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
response %in% responses[[4]] ~ "Functional groups",
response %in% responses[[5]] ~ "Traits"
)) %>%
filter(term == "scale(avg_daily_disch_nr_nrst_gage)" | term == "scale(preceding_yr_dry_duration_ys)") %>%
mutate(term = case_when(
term == "scale(avg_daily_disch_nr_nrst_gage)" ~ "Average daily discharge",
term == "scale(preceding_yr_dry_duration_ys)" ~ "Drying index"
)) %>%
mutate(estimate = ifelse(warning == "NO", estimate, NA))
model_predictions <- map_dfr(unlist(responses, use.names = F), mod.predict, data = df)
mp <- model_predictions %>%
rename(burn_debris = x) %>%
dplyr::select(-c(group)) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "Environmental",
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
response %in% responses[[4]] ~ "Functional groups",
response %in% responses[[5]] ~ "Traits"
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA)) %>%
group_by(response_cat, response) %>%
mutate(across(.cols = c(predicted, conf.low, conf.high), ~. - first(.))) %>%
filter(burn_debris != "un")
#---------------------------------------------------------------
## Plot it up
#---------------------------------------------------------------
# Conditional effects plots of burn status, holding continuous predictors at their mean, and assuming trout absent. Plots are conditional mean and 95% confidence intervals at the population-level of the random effect.
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS")) %>%
filter(response_cat == "Environmental") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
coord_flip()+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Burn status", title = "Environmental reponses")+
cowplot::theme_cowplot()
ggsave("figures/environmental.png", device = "png")
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS")) %>%
filter(response_cat == "Indices") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
coord_flip()+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free", ncol = 3) +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Burn status", title = "Aggregate reponses")+
cowplot::theme_cowplot()
ggsave("figures/total_indices.png", device = "png")
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS")) %>%
filter(response_cat == "Taxonomic") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
coord_flip()+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free", ncol = 3) +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Burn status", title = "Taxonomic reponses")+
cowplot::theme_cowplot()
ggsave("figures/taxonomic.png", device = "png")
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS")) %>%
filter(response_cat == "Functional groups") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
coord_flip()+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Burn status", title = "Functional group reponses")+
cowplot::theme_cowplot()
ggsave("figures/functional_groups.png", device = "png")
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS")) %>%
filter(response_cat == "Traits") %>%
ggplot(aes(x = burn_debris, y = predicted))+
geom_pointrange(aes(color = burn_debris, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
coord_flip()+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Burn status", title = "Trait indices")+
cowplot::theme_cowplot()
ggsave("figures/trait.png", device = "png")
# Plots for the effect size of the continuous predictors on each response variable.
ms %>% mutate(sig.col = ifelse(p.value >= 0.05, "NS", "S")) %>%
group_by(term) %>%
mutate(response_ordered = forcats::fct_reorder(response, estimate)) %>%
ggplot(aes(x = response_ordered, y = estimate))+
geom_hline(yintercept = 0, lty = 5, color = "gray")+
geom_pointrange(aes(ymax = estimate + std.error,
ymin = estimate - std.error, fill = sig.col), pch = 21, show.legend = F)+
scale_fill_manual(values = c(alpha("gray", 0), "black")) +
coord_flip()+
facet_wrap(response_cat ~ term, scales = "free", ncol = 2)+
labs(x = "", y = "Effect size")+
cowplot::theme_cowplot()
ggsave("figures/continuous_predictor_effects.png", device = "png", width = 15, height = 20)
?glht
?mcp
temp <- summary(glht(mod.sample, mcp(burn_debris = c("bdf - un = 0",
"brb - un = 0",
"bri - un = 0" ))))
temp
?p.adjust
df %>%
select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath)
names(df)
df %>%
select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath)
df %>%
dplry::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath)
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath)
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(value = mean(value),
se = se(value))
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(value = mean(value),
se = sd(value)/n())
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(mean_value = mean(value),
se = sd(value)/n())
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(mean_value = mean(value),
se = sd(value)/n())+
ggplot(aes(x = year, y = mean_value))+
geom_line(aes(color = burn_debris))+
facet_wrap(~name, ncol = 1)
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(mean_value = mean(value),
se = sd(value)/n()) %>%
ggplot(aes(x = year, y = mean_value))+
geom_line(aes(color = burn_debris))+
facet_wrap(~name, ncol = 1)
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(mean_value = mean(value),
se = sd(value)/n()) %>%
ggplot(aes(x = year, y = mean_value))+
geom_line(aes(color = burn_debris))+
facet_wrap(~name, ncol = 1, scales = "free")
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(mean_value = mean(value),
se = sd(value)/n()) %>%
ggplot(aes(x = year, y = mean_value))+
geom_line(aes(color = burn_debris))+
geom_point(aes(color = burn_debris))+
geom_errorbar(aes(color = burn_debris, ymin = mean_value - se, ymax = mean_value + se))+
facet_wrap(~name, ncol = 1, scales = "free")
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(mean_value = mean(value),
se = sd(value)/n()) %>%
ggplot(aes(x = year, y = mean_value))+
geom_line(aes(color = burn_debris))+
geom_point(aes(color = burn_debris))+
geom_linerange(aes(color = burn_debris, ymin = mean_value - se, ymax = mean_value + se))+
facet_wrap(~name, ncol = 1, scales = "free")
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(mean_value = mean(value),
se = sd(value)/n()) %>%
ggplot(aes(x = year, y = mean_value))+
geom_line(aes(color = burn_debris))+
geom_point(aes(color = burn_debris))+
geom_linerange(aes(color = burn_debris, ymin = mean_value - se, ymax = mean_value + se))+
facet_wrap(~name, ncol = 1, scales = "free")+
cowplot::theme_cowplot()
ggsave("figures/timeseries.png", device = "png", width = 6, height = 36)
ggsave("figures/timeseries.png", device = "png", width = 6, height = 18)
df %>%
dplyr::select(code, year, burn_debris, biotic_index, thermal_index, shredder, grazer, predator, coll_gath) %>%
pivot_longer(cols = biotic_index:coll_gath) %>%
group_by(year, burn_debris, name) %>%
summarize(mean_value = mean(value),
se = sd(value)/n()) %>%
ggplot(aes(x = year, y = mean_value))+
geom_line(aes(color = burn_debris))+
geom_point(aes(color = burn_debris))+
geom_linerange(aes(color = burn_debris, ymin = mean_value - se, ymax = mean_value + se))+
facet_wrap(~name, ncol = 2, scales = "free")+
cowplot::theme_cowplot()
ggsave("figures/timeseries.png", device = "png", width = 6, height = 18)
ggsave("figures/timeseries.png", device = "png", width = 8, height = 16)
ggsave("figures/timeseries.png", device = "png", width = 8, height = 8*1.66)
