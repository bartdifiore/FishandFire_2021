anova(mod1, mod1.1, mod1.2, mod1.3)
mod1 <- glmer(total_inverts ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|code) + (1|year), df, family = "poisson")
summary(mod1)
mod1.1 <- update(mod1, . ~ treatment * scale(discharge.log) + scale(drying.sqrt) + (1|code) + (1|year) )
summary(mod1.1)
mod1.2 <- update(mod1, . ~ treatment * scale(drying.sqrt) + scale(discharge.log) + (1|code) + (1|year) )
summary(mod1.2)
mod1.3 <- update(mod1, . ~ treatment + scale(drying.sqrt) + scale(discharge.log) + (1|code) + (1|year) )
summary(mod1.3)
anova(mod1, mod1.1, mod1.2, mod1.3)
AICcmodavg::AICc(mod1, mod1.1, mod1.2, mod1.3)
AICcmodavg::AICtab(mod1, mod1.1, mod1.2, mod1.3)
AICcmodavg::aictab(mod1, mod1.1, mod1.2, mod1.3)
AICcmodavg::aictab(list(mod1, mod1.1, mod1.2, mod1.3))
mod1 <- glmer(total_inverts ~ treatment + treatment:scale(discharge.log) + treatment:scale(drying.sqrt)) + (1|code) + (1|year), df, family = "poisson")
mod1 <- glmer(total_inverts ~ treatment + treatment:scale(discharge.log) + treatment:scale(drying.sqrt) + (1|code) + (1|year), df, family = "poisson")
summary(mod1)
mod1.1 <- update(mod1, . ~ treatment * scale(discharge.log) + scale(drying.sqrt) + (1|code) + (1|year) )
summary(mod1.1)
mod1.2 <- update(mod1, . ~ treatment * scale(drying.sqrt) + scale(discharge.log) + (1|code) + (1|year) )
summary(mod1.2)
mod1.3 <- update(mod1, . ~ treatment + scale(drying.sqrt) + scale(discharge.log) + (1|code) + (1|year) )
summary(mod1.3)
AICcmodavg::aictab(list(mod1, mod1.1, mod1.2, mod1.3))
ggplot(df, aes(x = year, y = total_inverts))+
geom_line(aes(linetype = treatment))
ggplot(df, aes(x = year, y = total_inverts))+
stat_summary(aes(lineype = treatment), fun.data = "mean_se", geom = line)
ggplot(df, aes(x = year, y = total_inverts))+
stat_summary(aes(lineype = treatment), fun.data = "mean_se", geom = "line")
ggplot(df, aes(x = year, y = total_inverts))+
stat_summary(aes(lineype = treatment, group = year), fun.data = "mean_se", geom = "line")
ggplot(df, aes(x = year, y = total_inverts))+
stat_summary(aes(lineype = treatment, group = year), fun.y = "mean_se", geom = "line")
ggplot(df, aes(x = year, y = total_inverts))+
stat_summary(aes(lineype = treatment, group = year), fun = "mean_se", geom = "line")
ggplot(df, aes(x = year, y = total_inverts))+
stat_summary(fun = "mean_se", geom = "line")
ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun = "mean_se", geom = "line")
names(df)
?stat_summary
ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun = "mean", geom = "line")
ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun = "mean_cl_boot", geom = "line")
ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun.data = "mean_cl_boot", geom = "line")
ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun.data = "mean_cl_boot")
ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun.data = "mean_cl_boot", aes(shape = treatment))
ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun.data = "mean_cl_boot", aes(shape = treatment))+
stat_summary(fun = "mean", geom = line, aes(linetype = treatment))+
geom_line(aes(linetype = treatment))
ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun.data = "mean_cl_boot", aes(shape = treatment))+
stat_summary(fun = "mean", geom = "line", aes(linetype = treatment))+
geom_line(aes(linetype = treatment))
ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun.data = "mean_cl_boot", aes(shape = treatment))+
stat_summary(fun = "mean", geom = "line", aes(linetype = treatment))+
geom_line(aes(linetype = treatment))+
theme_classic()
pred1 <- as.data.frame(ggpredict(mod1, terms = ~ treatment))
pred1
p2 <- ggplot(pred1, aes(x= x, y = predicted))+
geom_point(aes(shape = x))+
geom_linerange(aes(group = x, ymin = conf.low, ymax = conf.high))
p2
p2 <- ggplot(pred1, aes(x= x, y = predicted))+
geom_point(aes(shape = x), size = 3)+
geom_linerange(aes(group = x, ymin = conf.low, ymax = conf.high))+
theme_classic()
p2
cowplot::plot_grid(p1, p2, nrow = 1)
p1 <- ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun.data = "mean_cl_boot", aes(shape = treatment))+
stat_summary(fun = "mean", geom = "line", aes(linetype = treatment))+
geom_line(aes(linetype = treatment))+
theme_classic()
pred1 <- as.data.frame(ggpredict(mod1, terms = ~ treatment))
p2 <- ggplot(pred1, aes(x= x, y = predicted))+
geom_point(aes(shape = x), size = 3)+
geom_linerange(aes(group = x, ymin = conf.low, ymax = conf.high))+
theme_classic()
cowplot::plot_grid(p1, p2, nrow = 1)
p1 <- ggplot(df, aes(x = year, y = total_inverts, group = treatment))+
stat_summary(fun.data = "mean_se", aes(shape = treatment))+
stat_summary(fun = "mean", geom = "line", aes(linetype = treatment))+
geom_line(aes(linetype = treatment))+
theme_classic()
p1
responses
mod2 <- lmer(rarified_taxa ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|code) + (1|year), df)
summary(mod2)
mod2 <- lmer(rarified_taxa ~ treatment * scale(discharge.log) + scale(drying.sqrt) + (1|code) + (1|year), df)
mod2 <- lmer(rarified_taxa ~ treatment + scale(discharge.log) + scale(drying.sqrt) + (1|code) + (1|year), df)
mod2 <- lmer(rarified_taxa ~ treatment + scale(discharge.log) + (1|code) + (1|year), df)
mod2 <- lmer(rarified_taxa ~ treatment + (1|code) + (1|year), df)
?isSingular
mod2 <- lmer(rarified_taxa ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|code) + (1|year), df)
summary(mod2)
mod2 <- lmer(rarified_taxa ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|code), df)
mod2 <- lmer(rarified_taxa ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|year), df)
summary(mod2)
mod2 <- lmer(rarified_taxa ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|year), df) # rarified taxa results in a singular model unless I drop the site random effect. I'm not sure why, but I think it is best to proceed without the year random effect
summary(mod2)
mod2 <- lmer(rarified_taxa ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|year), df) # rarified taxa results in a singular model unless I drop the site random effect. I'm not sure why, but I think it is best to proceed without the year random effect
summary(mod2)
mod2.1 <- update(mod2, . ~ treatment * scale(discharge.log) + scale(drying.sqrt) + (1|year) )
summary(mod2.1)
mod2.2 <- update(mod2, . ~ treatment * scale(drying.sqrt) + scale(discharge.log) + (1|year) )
summary(mod2.2)
mod2.3 <- update(mod2, . ~ treatment + scale(drying.sqrt) + scale(discharge.log) + (1|year) )
summary(mod2.3)
AICcmodavg::aictab(list(mod2, mod2.1, mod2.2, mod2.3))
anova(mod2, mod2.2)
mod2 <- lmer(rarified_taxa ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|year), df, REML = F) # rarified taxa results in a singular model unless I drop the site random effect. I'm not sure why, but I think it is best to proceed without the year random effect
summary(mod2)
mod2.1 <- update(mod2, . ~ treatment * scale(discharge.log) + scale(drying.sqrt) + (1|year) )
summary(mod2.1)
mod2.2 <- update(mod2, . ~ treatment * scale(drying.sqrt) + scale(discharge.log) + (1|year) )
summary(mod2.2)
mod2.3 <- update(mod2, . ~ treatment + scale(drying.sqrt) + scale(discharge.log) + (1|year) )
summary(mod2.3)
AICcmodavg::aictab(list(mod2, mod2.1, mod2.2, mod2.3))
anova(mod2, mod2.2) # mod2.2 seems to be the most parsimonious
p1 <- ggplot(df, aes(x = year, y = rarified_taxa, group = treatment))+
stat_summary(fun.data = "mean_se", aes(shape = treatment))+
stat_summary(fun = "mean", geom = "line", aes(linetype = treatment))+
geom_line(aes(linetype = treatment))+
theme_classic()
pred2 <- as.data.frame(ggpredict(mod2.2, terms = ~ treatment))
p2 <- ggplot(pred1, aes(x= x, y = predicted))+
geom_point(aes(shape = x), size = 3)+
geom_linerange(aes(group = x, ymin = conf.low, ymax = conf.high))+
theme_classic()
cowplot::plot_grid(p1, p2, nrow = 1)
p1 <- ggplot(df, aes(x = year, y = rarified_taxa, group = treatment))+
stat_summary(fun.data = "mean_se", aes(shape = treatment))+
stat_summary(fun = "mean", geom = "line", aes(linetype = treatment))+
geom_line(aes(linetype = treatment))+
theme_classic()
pred2 <- as.data.frame(ggpredict(mod2.2, terms = ~ treatment))
p2 <- ggplot(pred2, aes(x= x, y = predicted))+
geom_point(aes(shape = x), size = 3)+
geom_linerange(aes(group = x, ymin = conf.low, ymax = conf.high))+
theme_classic()
cowplot::plot_grid(p1, p2, nrow = 1)
responses
mod3 <- lmer(biotic_index ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|year), df, REML = F) # rarified taxa results in a singular model unless I drop the site random effect. I'm not sure why, but I think it is best to proceed without the year random effect
summary(mod3)
mod3.1 <- update(mod3, . ~ treatment * scale(discharge.log) + scale(drying.sqrt) + (1|year) )
summary(mod3.1)
mod3.2 <- update(mod3, . ~ treatment * scale(drying.sqrt) + scale(discharge.log) + (1|year) )
summary(mod3.2)
mod3.3 <- update(mod3, . ~ treatment + scale(drying.sqrt) + scale(discharge.log) + (1|year) )
summary(mod3.3)
AICcmodavg::aictab(list(mod3, mod3.1, mod3.2, mod3.3))
anova(mod3, mod3.3) # mod3.2 seems to be the most parsimonious
anova(mod3, mod3.2) # mod3.2 seems to be the most parsimonious
anova(mod3, mod3.1) # mod3.2 seems to be the most parsimonious
pred3 <- as.data.frame(ggpredict(mod3.2, terms = ~ treatment))
p3 <- ggplot(pred3, aes(x= x, y = predicted))+
geom_point(aes(shape = x), size = 3)+
geom_linerange(aes(group = x, ymin = conf.low, ymax = conf.high))+
theme_classic()
p3
mod3 <- lmer(biotic_index ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|code) + (1|year), df, REML = F) # rarified taxa results in a singular model unless I drop the site random effect. I'm not sure why, but I think it is best to proceed without the year random effect
summary(mod3)
mod3.1 <- update(mod3, . ~ treatment * scale(discharge.log) + scale(drying.sqrt) + (1|code) + (1|year) )
summary(mod3.1)
mod3.2 <- update(mod3, . ~ treatment * scale(drying.sqrt) + scale(discharge.log) + (1|code) + (1|year) )
summary(mod3.2)
mod3.3 <- update(mod3, . ~ treatment + scale(drying.sqrt) + scale(discharge.log) + (1|code) + (1|year) )
summary(mod3.3)
AICcmodavg::aictab(list(mod3, mod3.1, mod3.2, mod3.3))
anova(mod3, mod3.3) # mod3.2 seems to be the most parsimonious
anova(mod3, mod3.2) # mod3.2 seems to be the most parsimonious
anova(mod3.2, mod3.3) # mod3.2 seems to be the most parsimonious
pred3 <- as.data.frame(ggpredict(mod3.2, terms = ~ treatment))
p3 <- ggplot(pred3, aes(x= x, y = predicted))+
geom_point(aes(shape = x), size = 3)+
geom_linerange(aes(group = x, ymin = conf.low, ymax = conf.high))+
theme_classic()
p3
?forcats::fct_relevel
?fct_recode
?fct_relevel
f <- factor(c("a", "b", "c", "d"), levels = c("b", "c", "d", "a"))
fct_relevel(f, "a")
fct_relevel(f, "b", "a")
fct_relevel(f, "d", "c", "b", "a")
unique(df$treatment)
source("code/clean_data.R")
source("code/function_draft.R")
#------------------------------------------------------------
#------------------------------------------------------------
## Model univariate relationships
#------------------------------------------------------------
# Here, we model the effect of trout presence, burn status, and drought on invertebrate community structure, including physical characteristics of the community, the abundance of invertebrate taxa, the abundance of invertebrate trait categories, and overall invertebrate indices. We will assume the same set of predictors for each model, and vary the response of interest.
# For simplicity, I'll divide the models and figures into the different "classes" of repsonse variable according to the table of response variables in `Fire-trout hypotheses.docx`
#-------------------------------------------------------------
#-------------------------------------------------------------
## Sample model
#-------------------------------------------------------------
df <- df %>%
mutate(treatment = as.factor(treatment),
mutate(year = as.factor(year),
discharge.log = log(avg_daily_disch_nr_nrst_gage),
df <- df %>%
drop_na(treatment) %>%
mutate(treatment = as.factor(treatment),
treatment = forcats::fct_relevel(treatment, "UNTL", "UNT", "BRITL", "BRBTL", "BDFTL")) %>%
mutate(year = as.factor(year),
code = as.factor(code),
discharge.log = log(avg_daily_disch_nr_nrst_gage),
drying.sqrt = sqrt(preceding_yr_dry_duration_ys)) %>%
filter(treatment != "BRIT")
unique(df$treatment)
predict_glmer <- function(y, data){
response = as.name(y)
form = substitute(response ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|code) + (1|year)) # model form
if(y == c("mollusks")){
# run the model
mod.temp = q.glmer(form, data[data$treatment != "BDFTL", ], family = "poisson")
# estimate post hoc comparisons
post.hoc = summary(glht(mod.temp$result, mcp(treatment=c("UNT - UNTL = 0",
"BRITL - UNTL = 0",
"BRBTL - UNTL = 0"))))
df.post = data.frame(response = y,
x = c("UNT", "BRITL", "BRBTL"),
comparison = names(post.hoc$test$coefficients),
difference = post.hoc$test$coefficients,
pvalue = round(post.hoc$test$pvalues,8)
)
dummy.row <- data.frame(response = y, x = "BDFTL", predicted = 0, std.error = NA,
conf.low = NA, conf.high = NA, group = as.factor("1"), warning = "NO", comparison = "NA", difference = NA, pvalue = NA)
# run the model predictions and join the posthoc comparisons
ggpredict(mod.temp$result, terms = ~ treatment) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group) %>%
left_join(df.post) %>%
bind_rows(dummy.row)
} else{
if(is.integer(data[,y]) == T ){ # this just fits a poisson glmer if the response is integer data, but a linear mixed effects model if the response is non-integer
# run the model
mod.temp = q.glmer(form, data, family = "poisson")
# estimate post hoc comparisons
post.hoc = summary(glht(mod.temp$result, mcp(treatment=c("UNT - UNTL = 0",
"BRITL - UNTL = 0",
"BRBTL - UNTL = 0",
"BDFTL - UNTL = 0"))))
df.post = data.frame(response = y,
x = c("UNT", "BRITL", "BRBTL", "BDFTL"),
comparison = names(post.hoc$test$coefficients),
difference = post.hoc$test$coefficients,
pvalue = round(post.hoc$test$pvalues,8)
)
# run the model predictions and join the posthoc comparisons
ggpredict(mod.temp$result, terms = ~ treatment) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group) %>%
left_join(df.post)
} else{
# run the model
mod.temp = q.lmer(form, data)
# estimate post hoc comparisons
post.hoc = summary(glht(mod.temp$result, mcp(treatment=c("UNT - UNTL = 0",
"BRITL - UNTL = 0",
"BRBTL - UNTL = 0",
"BDFTL - UNTL = 0"))))
df.post = data.frame(response = y,
x = c("UNT", "BRITL", "BRBTL", "BDFTL"),
comparison = names(post.hoc$test$coefficients),
difference = post.hoc$test$coefficients,
pvalue = round(post.hoc$test$pvalues,8)
)
ggpredict(mod.temp$result, terms = ~ treatment) %>%
as.data.frame() %>%
mutate(response = y, .before = x) %>%
mutate(warning = ifelse(length(mod.temp$warnings) == 0, "NO", mod.temp$warnings), .after = group) %>%
left_join(df.post)
}}
}
sub <- c(responses[[3]],responses[[2]])
model_sum <- map_dfr(sub, compile_results, data = df) %>%
mutate(sig = ifelse(p.value < 0.05 & p.value > 0.01, "*",
ifelse(p.value < 0.01 & p.value > 0.001, "**",
ifelse(p.value <= 0.001, "***", "NS"))))
write.csv(model_sum, file = "data/derived/interactions_summaries.csv", row.names = F)
model_predictions <- map_dfr(sub, mod.predict, data = df)
model_predictions <- map_dfr(sub, predict_glmer, data = df)
library(multcomp)
model_predictions <- map_dfr(sub, predict_glmer, data = df)
sub
mp <- model_predictions %>%
rename(treatment = x) %>%
dplyr::select(-c(group)) %>%
mutate(response_cat = case_when(
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA)) %>%
group_by(response_cat, response) %>%
mutate(across(.cols = c(predicted, conf.low, conf.high), ~. - first(.))) %>%
filter(burn_debris != "un")
mp <- model_predictions %>%
rename(treatment = x) %>%
dplyr::select(-c(group)) %>%
mutate(response_cat = case_when(
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA)) %>%
group_by(response_cat, response) %>%
mutate(across(.cols = c(predicted, conf.low, conf.high), ~. - first(.))) %>%
filter(burn_debris != "UNTL")
head(model_predictions)
#-------------------------------------------------------------
## Generate predictions
#-------------------------------------------------------------
predict_glmer(y = "total_inverts", df)
model_predictions$warning
head(model_predictions)
model_predictions %>%
rename(treatment = x) %>%
dplyr::select(-c(group)) %>%
mutate(response_cat = case_when(
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
))
model_predictions %>%
rename(treatment = x) %>%
dplyr::select(-c(group)) %>%
mutate(response_cat = case_when(
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA)) %>%
group_by(response_cat, response) %>%
mutate(across(.cols = c(predicted, conf.low, conf.high), ~. - first(.)))
mp <- model_predictions %>%
rename(treatment = x) %>%
dplyr::select(-c(group)) %>%
mutate(response_cat = case_when(
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA)) %>%
group_by(response_cat, response) %>%
mutate(across(.cols = c(predicted, conf.low, conf.high), ~. - first(.))) %>%
filter(burn_debris != "UNTL")
mp <- model_predictions %>%
rename(treatment = x) %>%
dplyr::select(-c(group)) %>%
mutate(response_cat = case_when(
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA)) %>%
group_by(response_cat, response) %>%
mutate(across(.cols = c(predicted, conf.low, conf.high), ~. - first(.))) %>%
filter(treatment != "UNTL")
head(mp)
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS")) %>%
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
coord_flip()+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Burn status", title = "Environmental reponses")+
cowplot::theme_cowplot()
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Treatment", title = "General indices")+
cowplot::theme_cowplot()
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS")) %>%
filter(response_cat == "Indices") %>%
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Treatment", title = "General indices")+
cowplot::theme_cowplot()
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS"),
treatment = forcats::fct_rev(treatment)) %>%
filter(response_cat == "Indices") %>%
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free") +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Treatment", title = "General indices")+
cowplot::theme_cowplot()
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS"),
treatment = forcats::fct_rev(treatment)) %>%
filter(response_cat == "Indices") %>%
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free", ncol = 1) +
labs(y = "Conditional mean difference\nfrom unburned streams", x = "Treatment", title = "General indices")+
cowplot::theme_cowplot()
ggsave("figures/total_indices.png", device = "png")
ggsave("figures/total_indices.png", device = "png", width = 4, height = 8.5)
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS"),
treatment = forcats::fct_rev(treatment)) %>%
filter(response_cat == "Indices") %>%
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free", ncol = 1) +
labs(y = "Conditional mean difference\nfrom unburned streams w/out trout", x = "Treatment", title = "General indices")+
cowplot::theme_cowplot()
ggsave("figures/total_indices.png", device = "png", width = 4, height = 8.5)
unique(mp$response_cat)
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS"),
treatment = forcats::fct_rev(treatment)) %>%
filter(response_cat == "Taxonomic") %>%
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free", ncol = 1) +
labs(y = "Conditional mean difference\nfrom unburned streams w/out trout", x = "Treatment", title = "General indices")+
cowplot::theme_cowplot()
ggsave("figures/taxonomic.png", device = "png", width = 4, height = 8.5)
model_predictions <- map_dfr(c(responses[[1]],responses[[2]], responses[[3]]), predict_glmer, data = df)
warnings()
mp <- model_predictions %>%
rename(treatment = x) %>%
dplyr::select(-c(group)) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "Environmental"
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA)) %>%
group_by(response_cat, response) %>%
mutate(across(.cols = c(predicted, conf.low, conf.high), ~. - first(.))) %>%
filter(treatment != "UNTL")
mp <- model_predictions %>%
rename(treatment = x) %>%
dplyr::select(-c(group)) %>%
mutate(response_cat = case_when(
response %in% responses[[1]] ~ "Environmental",
response %in% responses[[2]] ~ "Indices",
response %in% responses[[3]] ~ "Taxonomic",
)) %>%
mutate(predicted = ifelse(warning == "NO", predicted, NA)) %>%
group_by(response_cat, response) %>%
mutate(across(.cols = c(predicted, conf.low, conf.high), ~. - first(.))) %>%
filter(treatment != "UNTL")
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS"),
treatment = forcats::fct_rev(treatment)) %>%
filter(treatment != "UNT") %>%
filter(response_cat == "Indices") %>%
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free", ncol = 1) +
labs(y = "Conditional mean difference\nfrom unburned streams w/out trout", x = "Treatment", title = "Environmental responses")+
cowplot::theme_cowplot()
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS"),
treatment = forcats::fct_rev(treatment)) %>%
filter(treatment != "UNT") %>%
filter(response_cat == "Environment") %>%
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free", ncol = 1) +
labs(y = "Conditional mean difference\nfrom unburned streams w/out trout", x = "Treatment", title = "Environmental responses")+
cowplot::theme_cowplot()
mp %>%
mutate(sig = ifelse(pvalue < 0.05, "significant", "NS"),
treatment = forcats::fct_rev(treatment)) %>%
filter(treatment != "UNT") %>%
filter(response_cat == "Environmental") %>%
ggplot(aes(x = treatment, y = predicted))+
geom_pointrange(aes(color = treatment, ymin = conf.low, ymax = conf.high, fill = sig), position = position_dodge(width = 0.5), pch = 21, show.legend = F)+
scale_fill_manual(values = c("white", "black"))+
geom_hline(yintercept = 0, linetype = 4)+
facet_wrap(~response, scales = "free", ncol = 1) +
labs(y = "Conditional mean difference\nfrom unburned streams w/out trout", x = "Treatment", title = "Environmental responses")+
cowplot::theme_cowplot()
ggsave("figures/environmental.png", device = "png", width = 4, height = 8.5)
mod.sample <- glmer(algae_cpom_wet_wt ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|code) + (1|year), df, family = "poisson")
warnings()
mod.sample <- lmer(algae_cpom_wet_wt ~ treatment * (scale(discharge.log) + scale(drying.sqrt)) + (1|code) + (1|year), df)
summary(mod.sample)
